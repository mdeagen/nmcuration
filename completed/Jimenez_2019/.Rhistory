assign(paste0("D10b.",i), tibble(q=fig10bsheet[[1]],I=fig10bsheet[[1+i]])) # double brackets needed in order to avoid special char $ in colnames
fig10all <- add_row(fig10all,Tiso=c(52,55,56,57,58)[(i-1)%%5+1],graftdens=tempgraftdens,NP_loading=temploading, SAXS_df=paste0("D10b.",i))
}
##### ASSEMBLE MASTER DATAFRAME #####
mydf <- tibble(graftdens=as.character(NA),NP_loading=as.numeric(NA),Tiso=as.numeric(NA)) # Three factors: Graft Density, NP Loading, and Isothermal Crystallization Temperature
mydf <- mydf[-1,] # remove dummy row of NAs
# Use full_join to integrate dataframes into mydf
mydf %<>% full_join(Fig6) %>% full_join(Fig7b) %>% full_join(Fig8b) %>% full_join(Fig8c) %>% full_join(fig4all) %>% full_join(fig10all)
# Convert graftdens labels to graft densities provided in paper (units of ch/nm^2)
mydf$graftdens <- c(NA,0,0.02,0.1,0.26)[match(mydf$graftdens, c('Neat','Bare','Low','Med','High'))]
# Generate sample IDs (surrogate keys) in the form S1, S2, etc. using unique() function applied only to EXPERIMENTAL FACTOR columns
mydf <- mydf %$% unique(.[,1:3]) %>% add_column(sampleID=paste0("S",seq.int(nrow(.))), .before=1) %>% right_join(., mydf)
# Add filename for SAXS data (if SAXS data exist for the sample, otherwise NA)
mydf %<>% add_column(SAXS_filename=NA)
mydf$SAXS_filename <- ifelse(!is.na(mydf$SAXS_df),paste0(mydf$sampleID,"_SAXS_data.xlsx"),NA) # 2020-06-09 updated from .csv to .xlsx
# Add fillerinfo column if NP_loading > 0
fillerinfodf <- tribble(
~w,~x,~y,~z,
"Silica",NA,NA,NA, #Filler description
"SiO2",NA,NA,NA, #Filler chemical name/Filler name
NA,NA,NA,NA, #Filler PubChem ref
"SiO2",NA,NA,NA, #Filler abbrev
"Nissan Chemical Industries",NA,NA,NA, #Mfgr or source name
"MEK-ST",NA,NA,NA, #Trade name
NA,NA,NA,NA, #Density
NA,NA,NA,NA, #Crystal phase
"provided by mfgr",14,"nm",4 #Particle diameter
)
mydf %<>% add_column(fillerinfo=list(NA))
for (i in 1:nrow(mydf)) {
if(mydf$NP_loading[i]>0) mydf$fillerinfo[[i]] <-fillerinfodf
}
# Add particle surface treatment (PST) info if graft density is !NA and >0
# PST processing defined in separate Excel file for convenience
PSTinfodf <- tibble(x=c("Poly(methyl methacrylate)","PMMA"))
PSTprocessingdf <- readWorksheetFromFile(file = "PST_processing_Jimenez.xlsx", sheet=1, startRow=1, header=FALSE)
mydf %<>% add_column(PSTinfo=list(NA),PSTprocessing=list(NA))
for (i in 1:nrow(mydf)) {
if(mydf$graftdens[i] > 0 & !is.na(mydf$graftdens[i])) {
mydf$PSTinfo[[i]] <- PSTinfodf
mydf$PSTprocessing[[i]] <- PSTprocessingdf
}
}
mydf %<>% add_column(graftMw=NA)
mydf$graftMw <- c(40,40,29)[match(mydf$graftdens,c(0.02,0.1,0.26))]
# Add column for nanocomposite processing (only applicable when NP_loading>0)
nanoprocessingdf <- readWorksheetFromFile(file = "Nanocomposite_processing_Jimenez.xlsx", sheet=1, startRow=1, header=FALSE)
mydf %<>% add_column(nanoprocessing=list(NA))
for(i in 1:nrow(mydf)) {
if(mydf$NP_loading[i]>0) mydf$nanoprocessing[[i]] <- nanoprocessingdf
}
# Add half-life of crystallization (t50) column by inverting `1t50` column (also conditionally add "seconds" to t50Unit column)
mydf %<>% add_column(t50=NA)
mydf$t50 <- ifelse(!is.na(mydf$`1t50`),signif(1/mydf$`1t50`, digits = 3),NA) # NOTE: rounds to 3 sig figs (because 1/t50 is reported with 3 sig figs)
# Importing image filename data
mydf %<>% add_column(imagefolder=NA)
for (i in 1:nrow(mydf))
{
# only one sample has supplementary TEM files provided by author
if(mydf$graftdens[i]==0.1 & mydf$NP_loading[i]==0.087 & mydf$Tiso[i]==58.0) mydf$imagefolder[i] <- paste0(image_path, "/AMJ160_G5W10_58C")
}
# Identify list of unique combinations of factors EXCLUDING filler loading (in this case, we also ignore graftdens as this property is NA for null condition of filler loading)
controls <- mydf %$% unique(.[,c('Tiso')]) %>% add_column(NP_loading=0)
# Map control sample IDs to `controls` dataframe using left_join(), and change colname to control_sampleID
controls %<>% left_join(.,mydf[,c('Tiso','NP_loading','sampleID')])
# Rename sampleID to control_sampleID
names(controls)[3] <- "control_sampleID"
# Add control_sampleID to masterdf using right_join() on all columns EXCEPT NP_loading
mydf %<>% right_join(.,controls[,c('Tiso','control_sampleID')])
# REMOVE NP_loading=0 and replace with NA
mydf$NP_loading[mydf$NP_loading==0] <- NA
print(mydf,n=nrow(mydf))
# Include OPTIONAL "units" field for writing a string representing the units to the cell immediately to the right of the numerical value in the Excel template (this avoids the clutter of extra columns or reduced readability by storing tibbles within the dataframe) **ONLY WORKS IF UNITS ARE CONSISTENT
# Assign mappings to Excel schema templates
mappings <- tibble(variable = colnames(mydf), sheet = as.character(NA), cellrow = as.numeric(NA), cellcol = as.numeric(NA), unit = as.character(NA)) # 2020-06-09 added as.character(), as.numeric()
# Function for adding mappings from variables in mydf to location (sheet,row,col) in Excel template
addToMappings <- function(var, sheetname, row, col, unit=NA, mappingdf = mappings) {
mappingdf[mappingdf$variable==var,"sheet"] <- sheetname
mappingdf[mappingdf$variable==var,"cellrow"] <- row
mappingdf[mappingdf$variable==var,"cellcol"] <- col
mappingdf[mappingdf$variable==var,"unit"] <- unit
return(mappingdf)
}
# Individual mappings for relevant columns in mydf
mappings <- addToMappings("NP_loading","2. Material Types",46,3)
mappings <- addToMappings("sampleID","1. Data Origin",5,2)
mappings <- addToMappings("control_sampleID","1. Data Origin",6,2)
mappings <- addToMappings("graftdens","2. Material Types",55,3,"ch/nm^2") # has UNIT of ch/nm^2
mappings <- addToMappings("Tiso","5.4 Properties-Thermal",18,3,"Celsius") # has UNIT of Celsius
mappings <- addToMappings("Tcp","5.4 Properties-Thermal",18,3,"Celsius") # note: using Tpeak for non-isothermal crystallized samples
mappings <- addToMappings("%c","5.4 Properties-Thermal",12,3)
mappings <- addToMappings("t50","5.4 Properties-Thermal",16,3,"seconds") # has UNIT of seconds
mappings <- addToMappings("SAXS_filename","4. Characterization Methods",82,7)
mappings <- addToMappings("fillerinfo","2. Material Types",27,2)
mappings <- addToMappings("PSTinfo","2. Material Types",49,2)
mappings <- addToMappings("graftMw","2. Material Types",56,3,"kg/mol") # has UNIT of kg/mol
mappings <- addToMappings("PSTprocessing", "2. Material Types",62,1)
mappings <- addToMappings("nanoprocessing","3. Synthesis and Processing",20,1) # note that is placed below processing steps that apply to all samples
mappings %>% print(n=nrow(.))
# 2020-06-09 changed eval=FALSE for this code chunk
# create directory for submission files (if already exists, nothing happens)
dir.create("./SUBMISSION")
# prevent rewriting over previously saved sample Excel templates in the event of Sample ID occupying more than one row (if full_join is used and experimental factors are identified, this should not happen)
writenew <- tibble(sampleID=mydf$sampleID, write=TRUE)
# Loop across all rows in dataframe
for (i in 1:nrow(mydf)) {
rowSampleID <- mydf$sampleID[i]
sample_folder <- paste0("./SUBMISSION/", rowSampleID) # sub-directory name for sample
dir.create(sample_folder) # create directory (if already exists, will throw warning)
templateFile <- paste0(sample_folder, "/", rowSampleID, "_template.xlsx") # filename for the Excel schema template file for the sample
if(writenew[writenew$sampleID==rowSampleID,2][[1]]) { # create file if script is running anew
saveWorkbook(masterwb, templateFile) # save a copy of the master template, prepended with the "sample ID" surrogate key
writenew[writenew$sampleID==rowSampleID,2][[1]] <- FALSE # once template file created, ensures new file not saved over previous during rest of chunk
}
# Loop along columns in mydf to place relevant attributes into Excel schema template
for (j in 1:ncol(mydf)) {
if(!is.na(mappings$sheet[j])) { # only execute if a worksheet name is given in mappings dataframe
writeWorksheetToFile(file = templateFile, data = mydf[[i,j]], sheet = mappings$sheet[j], startRow = mappings$cellrow[j], startCol = mappings$cellcol[j], header = FALSE)
## If attribute value !NA and mappings contains UNITS, then include these units at startRow=mappings$cellrow[j] and (startCol=mappings$cellcol[j]+1)
if(!is.na(mydf[[i,j]][[1]][1]) & !is.na(mappings$unit[j])) writeWorksheetToFile(file = templateFile, data = mappings$unit[j], sheet = mappings$sheet[j], startRow = mappings$cellrow[j], startCol = mappings$cellcol[j]+1, header = FALSE)
}
# Loop for writing datafiles
if(grepl("_df", names(mydf)[j])) { # only execute if "_df" is in column header (a.k.a. needs to be exported as separate csv)
if(!is.na(mydf[[i,j]])) { # execute if the the value is NOT NA
# write df WITH NA ROWS REMOVED, which will be the df saved to .csv ()
tempdf <- get(mydf[[i,j]]) %>% .[complete.cases(.),]
# write nested tibble in _df column to csv in sub-directory # REMOVED 2020-06-09
# write_csv(tempdf, path=paste0(sample_folder, "/", mydf[[i,j+1]])) # (filename is i,j+1) [filename defined 2 columns before datafile tibble]
# use get(df[i,j-1]) to write the dataframe object directly
# ADDED 2020-06-09: Write to .xlsx files for supplementary datafiles
writeWorksheetToFile(file = paste0(sample_folder,"/",mydf[[i,j+1]]), data = tempdf, sheet = "Sheet1")
}
}
}
# If sample contains an imagefolder, copy these to Sample ID subfolder and add relevant imageinfo to Excel template
if(!is.na(mydf$imagefolder[i])) {
# save temporary list of all files in the image directory
temp_list_of_images <- list.files(mydf$imagefolder[i])
# copy all files to the sample subdirectory
file.copy(paste0(mydf$imagefolder[i],"/",temp_list_of_images), sample_folder)
# list files in Excel sample template
# base tibble (1 image, with data and placeholder for filename)
image_info <- tribble(
~x, ~y, ~z,
"Imagefile #", "Datafile name.jpg/png/tif/gif", "Note",
"Microstructure filename", NA, NA,
"Description", NA, NA,
"Microscopy type", "TEM", NA,
"Image type", "grayscale", NA,
NA,NA,NA,
"Image dimension", "Fixed Value", "Unit",
"Width", 2048, "pixel",
"Height", 2048, "pixel",
"Depth", 8, "bit",
"Preprocessing", NA, NA,
NA,NA,NA
)
aggregate_image_info <- tibble(x=NA,y=NA,z=NA)
image_info_sample <- tribble(
~x,~y,~z,
"Sample experimental info", "Fixed Value", "Unit",
"Sample size", NA, NA,
"Sample thickness", 100, "nm"
)
# rbind tibbles for each image in temp_list_of_images
for (k in 1:length(temp_list_of_images)) {
temp_image_info <- image_info
temp_image_info[[2,2]] <- temp_list_of_images[k]
aggregate_image_info <- rbind(aggregate_image_info,temp_image_info)
}
# append final info with sample thickness to tibble
aggregate_image_info <- rbind(aggregate_image_info,image_info_sample)
# add complete tibble to sheet '6. Microstructure' of sample template
writeWorksheetToFile(file = templateFile, data = aggregate_image_info, sheet = "6. Microstructure", startRow = 3, startCol = 1, header = FALSE)
}
}
# 2020-06-09 changed eval=FALSE for this code chunk
# create directory for submission files (if already exists, nothing happens)
dir.create("./SUBMISSION")
# prevent rewriting over previously saved sample Excel templates in the event of Sample ID occupying more than one row (if full_join is used and experimental factors are identified, this should not happen)
writenew <- tibble(sampleID=mydf$sampleID, write=TRUE)
# Loop across all rows in dataframe
for (i in 104:nrow(mydf)) {
rowSampleID <- mydf$sampleID[i]
sample_folder <- paste0("./SUBMISSION/", rowSampleID) # sub-directory name for sample
dir.create(sample_folder) # create directory (if already exists, will throw warning)
templateFile <- paste0(sample_folder, "/", rowSampleID, "_template.xlsx") # filename for the Excel schema template file for the sample
if(writenew[writenew$sampleID==rowSampleID,2][[1]]) { # create file if script is running anew
saveWorkbook(masterwb, templateFile) # save a copy of the master template, prepended with the "sample ID" surrogate key
writenew[writenew$sampleID==rowSampleID,2][[1]] <- FALSE # once template file created, ensures new file not saved over previous during rest of chunk
}
# Loop along columns in mydf to place relevant attributes into Excel schema template
for (j in 1:ncol(mydf)) {
if(!is.na(mappings$sheet[j])) { # only execute if a worksheet name is given in mappings dataframe
writeWorksheetToFile(file = templateFile, data = mydf[[i,j]], sheet = mappings$sheet[j], startRow = mappings$cellrow[j], startCol = mappings$cellcol[j], header = FALSE)
## If attribute value !NA and mappings contains UNITS, then include these units at startRow=mappings$cellrow[j] and (startCol=mappings$cellcol[j]+1)
if(!is.na(mydf[[i,j]][[1]][1]) & !is.na(mappings$unit[j])) writeWorksheetToFile(file = templateFile, data = mappings$unit[j], sheet = mappings$sheet[j], startRow = mappings$cellrow[j], startCol = mappings$cellcol[j]+1, header = FALSE)
}
# Loop for writing datafiles
if(grepl("_df", names(mydf)[j])) { # only execute if "_df" is in column header (a.k.a. needs to be exported as separate csv)
if(!is.na(mydf[[i,j]])) { # execute if the the value is NOT NA
# write df WITH NA ROWS REMOVED, which will be the df saved to .csv ()
tempdf <- get(mydf[[i,j]]) %>% .[complete.cases(.),]
# write nested tibble in _df column to csv in sub-directory # REMOVED 2020-06-09
# write_csv(tempdf, path=paste0(sample_folder, "/", mydf[[i,j+1]])) # (filename is i,j+1) [filename defined 2 columns before datafile tibble]
# use get(df[i,j-1]) to write the dataframe object directly
# ADDED 2020-06-09: Write to .xlsx files for supplementary datafiles
writeWorksheetToFile(file = paste0(sample_folder,"/",mydf[[i,j+1]]), data = tempdf, sheet = "Sheet1")
}
}
}
# If sample contains an imagefolder, copy these to Sample ID subfolder and add relevant imageinfo to Excel template
if(!is.na(mydf$imagefolder[i])) {
# save temporary list of all files in the image directory
temp_list_of_images <- list.files(mydf$imagefolder[i])
# copy all files to the sample subdirectory
file.copy(paste0(mydf$imagefolder[i],"/",temp_list_of_images), sample_folder)
# list files in Excel sample template
# base tibble (1 image, with data and placeholder for filename)
image_info <- tribble(
~x, ~y, ~z,
"Imagefile #", "Datafile name.jpg/png/tif/gif", "Note",
"Microstructure filename", "", "",
"Description", "", "",
"Microscopy type", "TEM", "",
"Image type", "grayscale", "",
"","","",
"Image dimension", "Fixed Value", "Unit",
"Width", "2048", "pixel",
"Height", "2048", "pixel",
"Depth", "8", "bit",
"Preprocessing", "", "",
"","",""
)
aggregate_image_info <- tibble(x="",y="",z="")
image_info_sample <- tribble(
~x,~y,~z,
"Sample experimental info", "Fixed Value", "Unit",
"Sample size", "", "",
"Sample thickness", "100", "nm"
)
# rbind tibbles for each image in temp_list_of_images
for (k in 1:length(temp_list_of_images)) {
temp_image_info <- image_info
temp_image_info[[2,2]] <- temp_list_of_images[k]
aggregate_image_info <- rbind(aggregate_image_info,temp_image_info)
}
# append final info with sample thickness to tibble
aggregate_image_info <- rbind(aggregate_image_info,image_info_sample)
# add complete tibble to sheet '6. Microstructure' of sample template
writeWorksheetToFile(file = templateFile, data = aggregate_image_info, sheet = "6. Microstructure", startRow = 3, startCol = 1, header = FALSE)
}
}
!is.na(mydf[[16,5]][[1]][1])
!is.na(mydf[[29,5]][[1]][1])
!is.na(mydf[[29,4]][[1]][1])
!is.na(mydf[[28,4]][[1]][1])
# 2020-06-09 changed eval=FALSE for this code chunk
# create directory for submission files (if already exists, nothing happens)
dir.create("./SUBMISSION")
# prevent rewriting over previously saved sample Excel templates in the event of Sample ID occupying more than one row (if full_join is used and experimental factors are identified, this should not happen)
writenew <- tibble(sampleID=mydf$sampleID, write=TRUE)
# Loop across all rows in dataframe
for (i in 17:nrow(mydf)) {
rowSampleID <- mydf$sampleID[i]
sample_folder <- paste0("./SUBMISSION/", rowSampleID) # sub-directory name for sample
dir.create(sample_folder) # create directory (if already exists, will throw warning)
templateFile <- paste0(sample_folder, "/", rowSampleID, "_template.xlsx") # filename for the Excel schema template file for the sample
if(writenew[writenew$sampleID==rowSampleID,2][[1]]) { # create file if script is running anew
saveWorkbook(masterwb, templateFile) # save a copy of the master template, prepended with the "sample ID" surrogate key
writenew[writenew$sampleID==rowSampleID,2][[1]] <- FALSE # once template file created, ensures new file not saved over previous during rest of chunk
}
# Loop along columns in mydf to place relevant attributes into Excel schema template
for (j in 1:ncol(mydf)) {
if(!is.na(mappings$sheet[j]) & !is.na(mydf[[i,j]][[1]][1])) { # only execute if a worksheet name is given in mappings dataframe # 2020-06-09 added additional Boolean to check if data itself is NA
writeWorksheetToFile(file = templateFile, data = mydf[[i,j]], sheet = mappings$sheet[j], startRow = mappings$cellrow[j], startCol = mappings$cellcol[j], header = FALSE)
## If attribute value !NA and mappings contains UNITS, then include these units at startRow=mappings$cellrow[j] and (startCol=mappings$cellcol[j]+1)
if(!is.na(mydf[[i,j]][[1]][1]) & !is.na(mappings$unit[j])) writeWorksheetToFile(file = templateFile, data = mappings$unit[j], sheet = mappings$sheet[j], startRow = mappings$cellrow[j], startCol = mappings$cellcol[j]+1, header = FALSE)
}
# Loop for writing datafiles
if(grepl("_df", names(mydf)[j])) { # only execute if "_df" is in column header (a.k.a. needs to be exported as separate csv)
if(!is.na(mydf[[i,j]])) { # execute if the the value is NOT NA
# write df WITH NA ROWS REMOVED, which will be the df saved to .csv ()
tempdf <- get(mydf[[i,j]]) %>% .[complete.cases(.),]
# write nested tibble in _df column to csv in sub-directory # REMOVED 2020-06-09
# write_csv(tempdf, path=paste0(sample_folder, "/", mydf[[i,j+1]])) # (filename is i,j+1) [filename defined 2 columns before datafile tibble]
# use get(df[i,j-1]) to write the dataframe object directly
# ADDED 2020-06-09: Write to .xlsx files for supplementary datafiles
writeWorksheetToFile(file = paste0(sample_folder,"/",mydf[[i,j+1]]), data = tempdf, sheet = "Sheet1")
}
}
}
# If sample contains an imagefolder, copy these to Sample ID subfolder and add relevant imageinfo to Excel template
if(!is.na(mydf$imagefolder[i])) {
# save temporary list of all files in the image directory
temp_list_of_images <- list.files(mydf$imagefolder[i])
# copy all files to the sample subdirectory
file.copy(paste0(mydf$imagefolder[i],"/",temp_list_of_images), sample_folder)
# list files in Excel sample template
# base tibble (1 image, with data and placeholder for filename)
image_info <- tribble(
~x, ~y, ~z,
"Imagefile #", "Datafile name.jpg/png/tif/gif", "Note",
"Microstructure filename", "", "",
"Description", "", "",
"Microscopy type", "TEM", "",
"Image type", "grayscale", "",
"","","",
"Image dimension", "Fixed Value", "Unit",
"Width", "2048", "pixel",
"Height", "2048", "pixel",
"Depth", "8", "bit",
"Preprocessing", "", "",
"","",""
)
aggregate_image_info <- tibble(x="",y="",z="")
image_info_sample <- tribble(
~x,~y,~z,
"Sample experimental info", "Fixed Value", "Unit",
"Sample size", "", "",
"Sample thickness", "100", "nm"
)
# rbind tibbles for each image in temp_list_of_images
for (k in 1:length(temp_list_of_images)) {
temp_image_info <- image_info
temp_image_info[[2,2]] <- temp_list_of_images[k]
aggregate_image_info <- rbind(aggregate_image_info,temp_image_info)
}
# append final info with sample thickness to tibble
aggregate_image_info <- rbind(aggregate_image_info,image_info_sample)
# add complete tibble to sheet '6. Microstructure' of sample template
writeWorksheetToFile(file = templateFile, data = aggregate_image_info, sheet = "6. Microstructure", startRow = 3, startCol = 1, header = FALSE)
}
}
# 2020-06-09 changed eval=FALSE for this code chunk
# create directory for submission files (if already exists, nothing happens)
dir.create("./SUBMISSION")
# prevent rewriting over previously saved sample Excel templates in the event of Sample ID occupying more than one row (if full_join is used and experimental factors are identified, this should not happen)
writenew <- tibble(sampleID=mydf$sampleID, write=TRUE)
# Loop across all rows in dataframe
for (i in 29:nrow(mydf)) {
rowSampleID <- mydf$sampleID[i]
sample_folder <- paste0("./SUBMISSION/", rowSampleID) # sub-directory name for sample
dir.create(sample_folder) # create directory (if already exists, will throw warning)
templateFile <- paste0(sample_folder, "/", rowSampleID, "_template.xlsx") # filename for the Excel schema template file for the sample
if(writenew[writenew$sampleID==rowSampleID,2][[1]]) { # create file if script is running anew
saveWorkbook(masterwb, templateFile) # save a copy of the master template, prepended with the "sample ID" surrogate key
writenew[writenew$sampleID==rowSampleID,2][[1]] <- FALSE # once template file created, ensures new file not saved over previous during rest of chunk
}
# Loop along columns in mydf to place relevant attributes into Excel schema template
for (j in 1:ncol(mydf)) {
if(!is.na(mappings$sheet[j]) & !is.na(mydf[[i,j]][[1]][1])) { # only execute if a worksheet name is given in mappings dataframe # 2020-06-09 added additional Boolean to check if data itself is NA
writeWorksheetToFile(file = templateFile, data = mydf[[i,j]], sheet = mappings$sheet[j], startRow = mappings$cellrow[j], startCol = mappings$cellcol[j], header = FALSE)
## If attribute value !NA and mappings contains UNITS, then include these units at startRow=mappings$cellrow[j] and (startCol=mappings$cellcol[j]+1)
if(!is.na(mydf[[i,j]][[1]][1]) & !is.na(mappings$unit[j])) writeWorksheetToFile(file = templateFile, data = mappings$unit[j], sheet = mappings$sheet[j], startRow = mappings$cellrow[j], startCol = mappings$cellcol[j]+1, header = FALSE)
}
# Loop for writing datafiles
if(grepl("_df", names(mydf)[j])) { # only execute if "_df" is in column header (a.k.a. needs to be exported as separate csv)
if(!is.na(mydf[[i,j]])) { # execute if the the value is NOT NA
# write df WITH NA ROWS REMOVED, which will be the df saved to .csv ()
tempdf <- get(mydf[[i,j]]) %>% .[complete.cases(.),]
# write nested tibble in _df column to csv in sub-directory # REMOVED 2020-06-09
# write_csv(tempdf, path=paste0(sample_folder, "/", mydf[[i,j+1]])) # (filename is i,j+1) [filename defined 2 columns before datafile tibble]
# use get(df[i,j-1]) to write the dataframe object directly
# ADDED 2020-06-09: Write to .xlsx files for supplementary datafiles
writeWorksheetToFile(file = paste0(sample_folder,"/",mydf[[i,j+1]]), data = tempdf, sheet = "Sheet1")
}
}
}
# If sample contains an imagefolder, copy these to Sample ID subfolder and add relevant imageinfo to Excel template
if(!is.na(mydf$imagefolder[i])) {
# save temporary list of all files in the image directory
temp_list_of_images <- list.files(mydf$imagefolder[i])
# copy all files to the sample subdirectory
file.copy(paste0(mydf$imagefolder[i],"/",temp_list_of_images), sample_folder)
# list files in Excel sample template
# base tibble (1 image, with data and placeholder for filename)
image_info <- tribble(
~x, ~y, ~z,
"Imagefile #", "Datafile name.jpg/png/tif/gif", "Note",
"Microstructure filename", "", "",
"Description", "", "",
"Microscopy type", "TEM", "",
"Image type", "grayscale", "",
"","","",
"Image dimension", "Fixed Value", "Unit",
"Width", "2048", "pixel",
"Height", "2048", "pixel",
"Depth", "8", "bit",
"Preprocessing", "", "",
"","",""
)
aggregate_image_info <- tibble(x="",y="",z="")
image_info_sample <- tribble(
~x,~y,~z,
"Sample experimental info", "Fixed Value", "Unit",
"Sample size", "", "",
"Sample thickness", "100", "nm"
)
# rbind tibbles for each image in temp_list_of_images
for (k in 1:length(temp_list_of_images)) {
temp_image_info <- image_info
temp_image_info[[2,2]] <- temp_list_of_images[k]
aggregate_image_info <- rbind(aggregate_image_info,temp_image_info)
}
# append final info with sample thickness to tibble
aggregate_image_info <- rbind(aggregate_image_info,image_info_sample)
# add complete tibble to sheet '6. Microstructure' of sample template
writeWorksheetToFile(file = templateFile, data = aggregate_image_info, sheet = "6. Microstructure", startRow = 3, startCol = 1, header = FALSE)
}
}
# REMOVE graftdens=0 and replace with NA # added 2020-06-09
mydf$graftdens[mydf$graftdens==0] <- NA
print(mydf,n=nrow(mydf))
print(mydf,n=nrow(mydf))
# 2020-06-09 changed eval=FALSE for this code chunk
# create directory for submission files (if already exists, nothing happens)
dir.create("./SUBMISSION")
# prevent rewriting over previously saved sample Excel templates in the event of Sample ID occupying more than one row (if full_join is used and experimental factors are identified, this should not happen)
writenew <- tibble(sampleID=mydf$sampleID, write=TRUE)
# Loop across all rows in dataframe
for (i in 1:nrow(mydf)) {
rowSampleID <- mydf$sampleID[i]
sample_folder <- paste0("./SUBMISSION/", rowSampleID) # sub-directory name for sample
dir.create(sample_folder) # create directory (if already exists, will throw warning)
templateFile <- paste0(sample_folder, "/", rowSampleID, "_template.xlsx") # filename for the Excel schema template file for the sample
if(writenew[writenew$sampleID==rowSampleID,2][[1]]) { # create file if script is running anew
saveWorkbook(masterwb, templateFile) # save a copy of the master template, prepended with the "sample ID" surrogate key
writenew[writenew$sampleID==rowSampleID,2][[1]] <- FALSE # once template file created, ensures new file not saved over previous during rest of chunk
}
# Loop along columns in mydf to place relevant attributes into Excel schema template
for (j in 1:ncol(mydf)) {
if(!is.na(mappings$sheet[j]) & !is.na(mydf[[i,j]][[1]][1])) { # only execute if a worksheet name is given in mappings dataframe # 2020-06-09 added additional Boolean to check if data itself is NA
writeWorksheetToFile(file = templateFile, data = mydf[[i,j]], sheet = mappings$sheet[j], startRow = mappings$cellrow[j], startCol = mappings$cellcol[j], header = FALSE)
## If attribute value !NA and mappings contains UNITS, then include these units at startRow=mappings$cellrow[j] and (startCol=mappings$cellcol[j]+1)
if(!is.na(mydf[[i,j]][[1]][1]) & !is.na(mappings$unit[j])) writeWorksheetToFile(file = templateFile, data = mappings$unit[j], sheet = mappings$sheet[j], startRow = mappings$cellrow[j], startCol = mappings$cellcol[j]+1, header = FALSE)
}
# Loop for writing datafiles
if(grepl("_df", names(mydf)[j])) { # only execute if "_df" is in column header (a.k.a. needs to be exported as separate csv)
if(!is.na(mydf[[i,j]])) { # execute if the the value is NOT NA
# write df WITH NA ROWS REMOVED, which will be the df saved to .csv ()
tempdf <- get(mydf[[i,j]]) %>% .[complete.cases(.),]
# write nested tibble in _df column to csv in sub-directory # REMOVED 2020-06-09
# write_csv(tempdf, path=paste0(sample_folder, "/", mydf[[i,j+1]])) # (filename is i,j+1) [filename defined 2 columns before datafile tibble]
# use get(df[i,j-1]) to write the dataframe object directly
# ADDED 2020-06-09: Write to .xlsx files for supplementary datafiles
writeWorksheetToFile(file = paste0(sample_folder,"/",mydf[[i,j+1]]), data = tempdf, sheet = "Sheet1")
}
}
}
# If sample contains an imagefolder, copy these to Sample ID subfolder and add relevant imageinfo to Excel template
if(!is.na(mydf$imagefolder[i])) {
# save temporary list of all files in the image directory
temp_list_of_images <- list.files(mydf$imagefolder[i])
# copy all files to the sample subdirectory
file.copy(paste0(mydf$imagefolder[i],"/",temp_list_of_images), sample_folder)
# list files in Excel sample template
# base tibble (1 image, with data and placeholder for filename)
image_info <- tribble(
~x, ~y, ~z,
"Imagefile #", "Datafile name.jpg/png/tif/gif", "Note",
"Microstructure filename", "", "",
"Description", "", "",
"Microscopy type", "TEM", "",
"Image type", "grayscale", "",
"","","",
"Image dimension", "Fixed Value", "Unit",
"Width", "2048", "pixel",
"Height", "2048", "pixel",
"Depth", "8", "bit",
"Preprocessing", "", "",
"","",""
)
aggregate_image_info <- tibble(x="",y="",z="")
image_info_sample <- tribble(
~x,~y,~z,
"Sample experimental info", "Fixed Value", "Unit",
"Sample size", "", "",
"Sample thickness", "100", "nm"
)
# rbind tibbles for each image in temp_list_of_images
for (k in 1:length(temp_list_of_images)) {
temp_image_info <- image_info
temp_image_info[[2,2]] <- temp_list_of_images[k]
aggregate_image_info <- rbind(aggregate_image_info,temp_image_info)
}
# append final info with sample thickness to tibble
aggregate_image_info <- rbind(aggregate_image_info,image_info_sample)
# add complete tibble to sheet '6. Microstructure' of sample template
writeWorksheetToFile(file = templateFile, data = aggregate_image_info, sheet = "6. Microstructure", startRow = 3, startCol = 1, header = FALSE)
}
}
#options(java.parameters = "-Xmx2048m") ## if XLConnect runs into memory issues, use this to increase memory allocation for Java
require(rcrossref) # package for scraping CrossRef database given a DOI
require(XLConnect) # package for MS Excel integration
require(tidyr)     # data wrangling/tidying
require(tibble)    # improvement on dataframes
require(readr)     # read_csv functionality
#require(here)      # identify present working directory based on file location # 2020-06-09
require(dplyr)     # data wrangling tools
require(magrittr)  # pipe operator (%>%), compound assignment operator (%<>%), exposition operator (%$%)
# Set the working directory to the location of this R notebook (this directory should contain the master template and associated data to import)
current_directory <- getwd() # 2020-06-09 updated
setwd(current_directory)
# file containing downloaded data (provided by the author)
data_path <- "./RawDataFromAuthors/DATA.xlsx" # 2020-06-09 updated
# Sub-directory containing image data
image_path <- "./Images" # 2020-06-09 updated
# Name of MASTER TEMPLATE FILE, which must be stored in same directory as this R notebook
master_template_path <- "master_template_2020_Jimenez.xlsx"
# load master template file
masterwb <- loadWorkbook(file=master_template_path, create = FALSE) ## requires input of template file name
