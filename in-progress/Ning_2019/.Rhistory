# D1.2, D1.4: Factor Crystallization_process = Iso 128C
dataset <- 1
startrows <- c(3,3,3,3)
startcols <- c(1,5,10,16)
endcols <- c(3,7,12,18)
for (i in 1:4) {
assign(paste0("D",dataset, ".", i), readWorksheetFromFile(paste0(data_path, filesToExtractFrom[dataset]), sheet = 1, startCol = startcols[i], endCol = endcols[i], startRow = startrows[i], header = TRUE))
temp <- get(paste0("D",dataset,".",i))
colnames(temp) <- c("Frequency (Hz)", "Real Permittivity", "Loss Permittivity")
assign(paste0("D",dataset,".",i), temp)
for (j in 1:2) {
assign(paste0("D",dataset,".",i,".",j), get(paste0("D",dataset,".",i))[,c(1,j+1)])
}
}
# D2: Factor Matrix_MW = 4
# D2.1, D2.2: Factor NP_loading = 10
# D2.3, D2.4: Factor NP_loading = 0
# D2.1, D2.3: Factor Crystallization_process = Quenched
# D2.2, D2.4: Factor Crystallization_process = Iso 105C
dataset <- 2
startrows <- c(2,2,2,2)
startcols <- c(1,5,9,13)
endcols <- c(3,7,11,15)
for (i in 1:4) {
assign(paste0("D",dataset,".",i), readWorksheetFromFile(paste0(data_path, filesToExtractFrom[dataset]), sheet = 1, startCol = startcols[i], endCol = endcols[i], startRow = startrows[i], header = TRUE))
temp <- get(paste0("D",dataset,".",i))
colnames(temp) <- c("Frequency (Hz)", "Real Permittivity", "Loss Permittivity")
assign(paste0("D",dataset,".",i), temp)
for (j in 1:2) {
assign(paste0("D",dataset,".",i,".",j), get(paste0("D",dataset,".",i))[,c(1,j+1)])
}
}
# 3: DMA results (152k MW samples only)
# Each dataset comprises 3 columns [frequency, storage modulus, loss modulus, and tan delta]; each will be separated into 3 "datafiles,"
#   all containing frequency as the first column and either storage mod/loss mod/tan delta as the second column
# D3: Factor Matrix_MW = 152
# D3.1, D3.2: Factor NP_loading = 0
# D3.3, D3.4: Factor NP_loading = 10
# D3.1, D3.3: Factor Crystallization_process = Quenched
# D3.2, D3.4: Factor Crystallization_process = Iso 128C
dataset <- 3
startrows <- c(2,2,2,2)
startcols <- c(2,8,14,19)
endcols <- c(5,11,17,22)
for (i in 1:4) {
assign(paste0("D",dataset,".",i), readWorksheetFromFile(paste0(data_path, filesToExtractFrom[dataset]), sheet = 1, startCol = startcols[i], endCol = endcols[i], startRow = startrows[i], header = TRUE))
temp <- get(paste0("D",dataset,".",i))
colnames(temp) <- c("Frequency (Hz)", "Storage Modulus (Pa)", "Loss Modulus (Pa)", "Tan delta")
assign(paste0("D",dataset,".",i), temp)
for (j in 1:3) {
assign(paste0("D",dataset,".",i,".",j), get(paste0("D",dataset,".",i))[,c(1,j+1)])
}
}
# 4: DSC results (152k MW samples only, 10wt% loading samples only)
# Each dataset comprises 2 relevant columns [time (min), heat flow (W/g)]; 3 datasets in total;
# only the isothermal cooling temperature varies (125C, 128C, 129.5C), therefore no need to split datasets
# D4 Factor Matrix_MW = 152, Factor NP_loading = 10
# D4.1: Factor Crystallization_process = Iso 125C
# D4.2: Factor Crystallization_process = Iso 128C
# D4.3: Factor Crystallization_process = Iso 129.5C
dataset <- 4
startrows <- c(3,3,3)
startcols <- c(2,9,16)
endcols <- c(3,10,17)
for (i in 1:3) {
assign(paste0("D",dataset,".",i), readWorksheetFromFile(paste0(data_path, filesToExtractFrom[dataset]), sheet = 1, startCol = startcols[i], endCol = endcols[i], startRow = startrows[i], header = TRUE))
temp <- get(paste0("D",dataset,".",i))
colnames(temp) <- c("Time (min)", "Heat Flow (W/g)")
assign(paste0("D",dataset,".",i), temp)
}
# 5: SAXS results
# Each datafile will comprise 2 columns [q and I]
# D5.1: 4 datasets for the 152k samples (all with NP_loading = 0): Quenched, Iso 128C, Iso 129.5C, Iso 130C
# D5.2: 3 datasets for the 152k samples (all with NP_loading = 10): Quenched, Iso 128C, Iso 129.5C
# D5.3: 4 datasets for the 4k samples: (NP_loading = 0,10) x (Quenched, Iso 105C)
# D5.1.1: Factor Matrix_MW = 152k, Factor NP_loading = 0, Factor Crystallization_process = Quenched
# D5.1.2: Factor Matrix_MW = 152k, Factor NP_loading = 0, Factor Crystallization_process = Iso 128C
# D5.1.3: Factor Matrix_MW = 152k, Factor NP_loading = 0, Factor Crystallization_process = Iso 129.5C
# D5.1.4: Factor Matrix_MW = 152k, Factor NP_loading = 0, Factor Crystallization_process = Iso 130C
# D5.2.1: Factor Matrix_MW = 152k, Factor NP_loading = 10, Factor Crystallization_process = Quenched
# D5.2.2: Factor Matrix_MW = 152k, Factor NP_loading = 10, Factor Crystallization_process = Iso 128C
# D5.2.3: Factor Matrix_MW = 152k, Factor NP_loading = 10, Factor Crystallization_process = Iso 129.5C
# IGNORE THE COLUMNS WITH "IQ^2" HEADER
# D5.3.1: Factor Matrix_MW = 4k, Factor NP_loading = 0, Factor Crystallization_process = Quenched
# D5.3.2: Factor Matrix_MW = 4k, Factor NP_loading = 0, Factor Crystallization_process = Iso 105C
# D5.3.3: Factor Matrix_MW = 4k, Factor NP_loading = 10, Factor Crystallization_process = Quenched
# D5.3.4: Factor Matrix_MW = 4k, Factor NP_loading = 10, Factor Crystallization_process = Iso 105C
dataset <- 5
startrows <- c(2,2,2)
startcols <- c(1,7,17)
endcols <- c(5,10,21)
for (i in 1:3) {
assign(paste0("D",dataset,".",i), readWorksheetFromFile(paste0(data_path, filesToExtractFrom[dataset]), sheet = 1, startCol = startcols[i], endCol = endcols[i], startRow = startrows[i], header = TRUE))
temp <- get(paste0("D",dataset,".",i))
colnames(temp)[1] <- "q" # first column is "q"
for (k in 2:ncol(get(paste0("D",dataset,".",i)))) {
colnames(temp)[k] <- "I" # all subsequent columns (each a new sample) is "I"
}
assign(paste0("D",dataset,".",i), temp)
for (j in 1:(ncol(get(paste0("D",dataset,".",i)))-1)) {
assign(paste0("D",dataset,".",i,".",j), get(paste0("D",dataset,".",i))[,c(1,j+1)])
}
}
# 6: TGA results
# Each datafile will comprise 4 columns [time (min), T (C), mass (mg), and %] and applies to all samples where factor NP_loading = 10
# D6.1: Corresponds to 152k samples
# D6.2: Corresponds to 4k samples
dataset <- 6
startrows <- c(1,1)
startcols <- c(8,14)
endcols <- c(11,17)
for (i in 1:2) {
assign(paste0("D",dataset,".",i), readWorksheetFromFile(paste0(data_path, filesToExtractFrom[dataset]), sheet = 1, startCol = startcols[i], endCol = endcols[i], startRow = startrows[i], header = TRUE))
temp <- get(paste0("D",dataset,".",i))
colnames(temp) <- c("Time (min)", "T (C)", "mass (mg)", "%")
assign(paste0("D",dataset,".",i), temp)
}
# Compile tabular data into masterdf dataframe
# First, add_column() function for any new variables that are not yet in masterdf (i.e. response variables)
#  --> in the case of dataile columns, these must then be converted to list type at th
# Second, add_row() where all variables are defined (either constant, or as columns of the incoming table)
# Initialize dataframe
masterdf <- tibble(matrix_MW = NA, NP_loading = NA, crystallization_process = NA)
#######
# ADD NECESSARY COLUMNS
# Table 1 data (melting_temp, degree_crystallization)
masterdf <- add_column(masterdf, melting_temp = NA, degree_crystallization = NA)         # 2020-06-08 updated .csv to .xlsx
# D1-D2: Dielectric Spectra (datafiles: real permittivity, loss permittivity)
masterdf <- add_column(masterdf, dielec_perm_real_filename = "_DS_real_permittivity.xlsx", dielec_perm_real_datafile = NA, dielec_perm_loss_filename = "_DS_loss_permittivity.xlsx", dielec_perm_loss_datafile = NA)
# D3: DMA (datafiles: storage modulus, loss modulus, tan delta)
masterdf <- add_column(masterdf, storage_modulus_filename = "_DMA_storage_modulus.xlsx", storage_modulus_datafile = NA, loss_modulus_filename = "_DMA_loss_modulus.xlsx", loss_modulus_datafile = NA, DMA_tan_delta_filename = "_DMA_tan_delta.xlsx", DMA_tan_delta_datafile = NA)
# D4: DSC
masterdf <- add_column(masterdf, DSC_filename = "_DSC_data.xlsx", DSC_datafile = NA)
# D5: SAXS
masterdf <- add_column(masterdf, SAXS_filename = "_SAXS_data.xlsx", SAXS_datafile = NA)
# D6: TGA
masterdf <- add_column(masterdf, TGA_filename = "_TGA_data.xlsx", TGA_datafile = NA)
#######
# Coerce all columns ending in "_datafile" to type LIST
masterdf[,grep("_datafile", names(masterdf))] <- lapply(names(masterdf[,grep("_datafile", names(masterdf))]), as.list)
#######
# ADD NECESSARY ROWS (data!) [be sure all necessary factors are defined]
# Table 1
masterdf <- add_row(masterdf, matrix_MW = table1[,2], NP_loading = table1[,4], crystallization_process = table1[,5], melting_temp = table1[,6], degree_crystallization = table1[,7])
# D1 Dielec Spec (4 datasets, each producing 2 datafiles)
for (i in 1:4) {
temp_MW <- 152
temp_loading <- c(0,0,10,10)
temp_cryst <- c("quenched", "isothermal crystallized (Tc = 128 ?C)","quenched", "isothermal crystallized (Tc = 128 ?C)")
# Real permittivity
masterdf$dielec_perm_real_datafile[!is.na(masterdf$matrix_MW) & masterdf$matrix_MW==temp_MW & masterdf$NP_loading==temp_loading[i] & masterdf$crystallization_process==temp_cryst[i]][[1]] <- get(paste0("D1.",i,".1"))
# Loss permittivity
masterdf$dielec_perm_loss_datafile[!is.na(masterdf$matrix_MW) & masterdf$matrix_MW==temp_MW & masterdf$NP_loading==temp_loading[i] & masterdf$crystallization_process==temp_cryst[i]][[1]] <- get(paste0("D1.",i,".2"))
}
# D2 Dielec Spec (4 datasets, each producing 2 datafiles)
for (i in 1:4) {
temp_MW <- 4
temp_loading <- c(10,10,0,0)
temp_cryst <- c("quenched", "isothermal crystallized (Tc = 105 ?C)","quenched", "isothermal crystallized (Tc = 105 ?C)")
# Real permittivity
masterdf$dielec_perm_real_datafile[!is.na(masterdf$matrix_MW) & masterdf$matrix_MW==temp_MW & masterdf$NP_loading==temp_loading[i] & masterdf$crystallization_process==temp_cryst[i]][[1]] <- get(paste0("D2.",i,".1"))
# Loss permittivity
masterdf$dielec_perm_loss_datafile[!is.na(masterdf$matrix_MW) & masterdf$matrix_MW==temp_MW & masterdf$NP_loading==temp_loading[i] & masterdf$crystallization_process==temp_cryst[i]][[1]] <- get(paste0("D2.",i,".2"))
}
# D3 DMA (4 datasets, each producing 3 datafiles)
for (i in 1:4) {
temp_MW <- 152
temp_loading <- c(0,0,10,10)
temp_cryst <- c("quenched", "isothermal crystallized (Tc = 128 ?C)","quenched", "isothermal crystallized (Tc = 128 ?C)")
# Storage modulus
masterdf$storage_modulus_datafile[!is.na(masterdf$matrix_MW) & masterdf$matrix_MW==temp_MW & masterdf$NP_loading==temp_loading[i] & masterdf$crystallization_process==temp_cryst[i]][[1]] <- get(paste0("D3.",i,".1"))
# Loss modulus
masterdf$loss_modulus_datafile[!is.na(masterdf$matrix_MW) & masterdf$matrix_MW==temp_MW & masterdf$NP_loading==temp_loading[i] & masterdf$crystallization_process==temp_cryst[i]][[1]] <- get(paste0("D3.",i,".2"))
# Tan delta
masterdf$DMA_tan_delta_datafile[!is.na(masterdf$matrix_MW) & masterdf$matrix_MW==temp_MW & masterdf$NP_loading==temp_loading[i] & masterdf$crystallization_process==temp_cryst[i]][[1]] <- get(paste0("D3.",i,".3"))
}
# D4 DSC (152k and 10% loading only)
# First must add two new rows because new level of crystallization_process introduced (Iso 125)
masterdf <- add_row(masterdf, matrix_MW=152, NP_loading=10, crystallization_process=c("isothermal crystallized (Tc = 125 ?C)"))
for (i in 1:3) {
temp_MW <- 152
temp_loading <- 10
temp_cryst <- c("isothermal crystallized (Tc = 125 ?C)","isothermal crystallized (Tc = 128 ?C)","isothermal crystallized (Tc = 129.5 ?C)")
# DSC curve
masterdf$DSC_datafile[!is.na(masterdf$matrix_MW) & masterdf$matrix_MW==temp_MW & masterdf$NP_loading==temp_loading & masterdf$crystallization_process==temp_cryst[i]][[1]] <- get(paste0("D4.",i))
}
# D5 SAXS data
# First must add two new rows because new level of crystallization_process introduced (Iso 130)
masterdf <- add_row(masterdf, matrix_MW=152, NP_loading=0, crystallization_process=c("isothermal crystallized (Tc = 130 ?C)"))
# D5.1.x
for (i in 1:4) {
temp_MW <- 152
temp_loading <- 0
temp_cryst <- c("quenched","isothermal crystallized (Tc = 128 ?C)","isothermal crystallized (Tc = 129.5 ?C)","isothermal crystallized (Tc = 130 ?C)")
# DSC curve
masterdf$SAXS_datafile[!is.na(masterdf$matrix_MW) & masterdf$matrix_MW==temp_MW & masterdf$NP_loading==temp_loading & masterdf$crystallization_process==temp_cryst[i]][[1]] <- get(paste0("D5.1.",i))
}
# D5.2.x
for (i in 1:3) {
temp_MW <- 152
temp_loading <- 10
temp_cryst <- c("quenched","isothermal crystallized (Tc = 128 ?C)","isothermal crystallized (Tc = 129.5 ?C)")
# DSC curve
masterdf$SAXS_datafile[!is.na(masterdf$matrix_MW) & masterdf$matrix_MW==temp_MW & masterdf$NP_loading==temp_loading & masterdf$crystallization_process==temp_cryst[i]][[1]] <- get(paste0("D5.2.",i))
}
# D5.3.x
for (i in 1:4) {
temp_MW <- 4
temp_loading <- c(0,0,10,10)
temp_cryst <- c("quenched","isothermal crystallized (Tc = 105 ?C)","quenched","isothermal crystallized (Tc = 105 ?C)")
# DSC curve
masterdf$SAXS_datafile[!is.na(masterdf$matrix_MW) & masterdf$matrix_MW==temp_MW & masterdf$NP_loading==temp_loading[i] & masterdf$crystallization_process==temp_cryst[i]][[1]] <- get(paste0("D5.3.",i))
}
# D6 TGA data
# Same dataset applies to multiple samples (depends on loading)
# D6.1: Corresponds to 152k samples
# D6.2: Corresponds to 4k samples
for (i in 1:nrow(masterdf)) {
if(!is.na(masterdf$matrix_MW[i]) & masterdf$matrix_MW[i]==152 & masterdf$NP_loading[i]==10) masterdf$TGA_datafile[[i]] <- get("D6.1")
if(!is.na(masterdf$matrix_MW[i]) & masterdf$matrix_MW[i]==4 & masterdf$NP_loading[i]==10) masterdf$TGA_datafile[[i]] <- get("D6.2")
}
# Fill out "filename" rows by copying first row value into all subsequent rows (use grep("_filename"))
masterdf <- fill(masterdf, names(masterdf[,grep("_filename", names(masterdf))]))
# FACTOR-LINKED VARIABLES
# NP_Loading = 10
fillerinfo_df <- tribble( # Filler info
~x, ~y, ~z,
"silica", NA, NA,
"Silicon dioxide", NA, NA,
NA, NA, NA,
"SiO2", NA, NA,
"Nissan Chemical Co.", NA, NA,
"MEK-ST", NA, NA,
NA, NA, NA,
NA, NA, NA,
NA, 14, "nm"
)
PSTinfo_df <- tribble( # Particle surface treatment info
~x, ~y, ~z,
"n-octadecyldimethylmethoxysilane",NA,NA,
"C18",NA,NA,
"CH2",NA,NA,
"Gelest",NA,NA,
NA,NA,NA,
NA,NA,NA,
"graft density",1.3,"ch/nm^2"
)
process_PST <- as_tibble(readWorksheetFromFile("Process_Ning_SurfaceChemical.xlsx",sheet=1, header=FALSE)) # used Excel template to define process
# Sheet '3. Synthesis and Processing' varies depending on Matrix_MW (final equilibration temperature)
process_PNC_152k <- as_tibble(readWorksheetFromFile("Process_Ning_PNC_152k.xlsx",sheet=1, header=FALSE))
process_PNC_4k <- as_tibble(readWorksheetFromFile("Process_Ning_PNC_4k.xlsx",sheet=1, header=FALSE))
masterdf <- add_column(masterdf, fillerinfo=NA, PSTinfo=NA, processing=NA)
masterdf$fillerinfo <- as.list(masterdf$fillerinfo) # coerce column as list because entering table of values
masterdf$PSTinfo <- as.list(masterdf$PSTinfo)
masterdf$processing <- as.list(masterdf$processing)
for (i in 1:nrow(masterdf)) {
if(!is.na(masterdf$matrix_MW[i]) & masterdf$NP_loading[i]==10) {
masterdf$fillerinfo[[i]] <- fillerinfo_df # filler info
masterdf$PSTinfo[[i]] <- PSTinfo_df # particle surface treatment info
if(masterdf$matrix_MW[i]==152) {
masterdf$processing[[i]] <- process_PNC_152k # processing info (152k MW)
}
if(masterdf$matrix_MW[i]==4) {
masterdf$processing[[i]] <- process_PNC_4k # processing info (4k MW)
}
}
}
# Quenched vs isothermal crystallization
# Cooling rate of DSC (20 C/min for quenched and 2 C/min isothermal)
masterdf <- add_column(masterdf, DSCcoolingrate=NA)
for (i in 1:nrow(masterdf)) {
if(!is.na(masterdf$matrix_MW[i]) & masterdf$crystallization_process[i]=="quenched") {
masterdf$DSCcoolingrate <- 20
} else masterdf$DSCcoolingrate <- 2
}
# Subfolders containing TEM images
masterdf <- add_column(masterdf, imagefolder = NA)
for (i in 1:nrow(masterdf)) {
if(!is.na(masterdf$matrix_MW[i]) & masterdf$NP_loading[i]==10) { #TEM images only for composite samples
# 4k matrix MW
if(masterdf$matrix_MW[i]==4 & masterdf$crystallization_process[i]=="isothermal crystallized (Tc = 103.5 ?C)") masterdf$imagefolder[[i]] <- paste0(image_path, "/4k Composite 103.5C")
if(masterdf$matrix_MW[i]==4 & masterdf$crystallization_process[i]=="isothermal crystallized (Tc = 105 ?C)") masterdf$imagefolder[[i]] <- paste0(image_path, "/4k Composite 105C")
if(masterdf$matrix_MW[i]==4 & masterdf$crystallization_process[i]=="quenched") masterdf$imagefolder[[i]] <- paste0(image_path, "/4k Composite Quench")
# 152k matrix MW
if(masterdf$matrix_MW[i]==152 & masterdf$crystallization_process[i]=="isothermal crystallized (Tc = 128 ?C)") masterdf$imagefolder[[i]] <- paste0(image_path, "/152k Composite 128C")
if(masterdf$matrix_MW[i]==152 & masterdf$crystallization_process[i]=="quenched") masterdf$imagefolder[[i]] <- paste0(image_path, "/152k Composite Quench")
}
}
# Remove rows where any factors are NA
masterdf <- masterdf[!is.na(masterdf$matrix_MW) & !is.na(masterdf$NP_loading) & !is.na(masterdf$crystallization_process),]
# UNIT CONVERSIONS (e.g. NP_loading as weight fraction)
masterdf$NP_loading <- masterdf$NP_loading/100
#### Add filenames with sample prefix (e.g. S1_SAXS_datafile.csv)
# Add column with sample ID prefixes (e.g. S1, S2, etc.)
masterdf$sampleID <- paste0("S",seq.int(nrow(masterdf)))
# Prepend sampleID to all _filename values
for (i in 1:nrow(masterdf)) {
for (j in 1:ncol(masterdf)) {
if(grepl("_filename", names(masterdf)[j])) {# execute if "_filename" within column header
masterdf[i,j] <- paste0(masterdf$sampleID[i], masterdf[i,j])
}
}
}
# Identify list of unique combinations of factors EXCLUDING filler loading (in this case, matrix_Mw and crystallization_process)
controls <- masterdf %$% unique(.[,c(1,3)]) %>% add_column(NP_loading=0)
# Map control sample IDs to `controls` dataframe using left_join(), and change colname to control_sampleID
controls %<>% left_join(.,masterdf[,c(1:3,27)])
# Rename sampleID to control_sampleID
names(controls)[4] <- "control_sampleID"
# REMOVE NP_loading=0 and replace with NA
masterdf$NP_loading[masterdf$NP_loading==0] <- NA
# Add control_sampleID to masterdf using right_join() on all columns EXCEPT NP_loading
masterdf %<>% right_join(.,controls[,c(1,2,4)]) %>% print()
## 2020-06-08 REMOVE "_FILENAME" value if "_DATAFILE" is NULL
for (i in 1:nrow(masterdf)) {
for (j in 1:ncol(masterdf)) {
if(is.null(masterdf[[j]][[i]])) {
masterdf[[j-1]][[i]] <- ""
}
}
}
print(masterdf)
# Table with masterdf column names as rows and template locations (sheet, cell) as columns
mappings <- tibble(variable = colnames(masterdf), sheet = as.character(NA), cellrow = as.numeric(NA), cellcol = as.numeric(NA)) # 2020-06-08 added as.character and as.numeric for NA handling
# Function for adding mappings from variables in masterdf to location (sheet,row,col) in Excel template
addToMappings <- function(var, sheetname, row, col, mappingdf = mappings) {
mappingdf[mappingdf$variable==var,"sheet"] <- sheetname
mappingdf[mappingdf$variable==var,"cellrow"] <- row
mappingdf[mappingdf$variable==var,"cellcol"] <- col
return(mappingdf)
}
# Add mappings for variables in dataframe (NOTE: COLUMNS MUST ALREADY EXIST IN masterdf)
mappings <- addToMappings("matrix_MW","2. Material Types",15,3)
mappings <- addToMappings("NP_loading","2. Material Types",46,3)
mappings <- addToMappings("melting_temp","5.4 Properties-Thermal",30,3)
mappings <- addToMappings("degree_crystallization","5.4 Properties-Thermal",12,3)
mappings <- addToMappings("dielec_perm_real_filename","5.3 Properties-Electrical",17,5)
mappings <- addToMappings("dielec_perm_loss_filename","5.3 Properties-Electrical",18,5)
mappings <- addToMappings("storage_modulus_filename","5.2 Properties-Viscoelastic",19,3)
mappings <- addToMappings("loss_modulus_filename","5.2 Properties-Viscoelastic",20,3)
mappings <- addToMappings("DMA_tan_delta_filename","5.2 Properties-Viscoelastic",21,3)
mappings <- addToMappings("DSC_filename","5.4 Properties-Thermal",6,2)
mappings <- addToMappings("DSC_filename","4. Characterization Methods",66,7) # NOTE: There are two locations in schema template for DSC profile information
mappings <- addToMappings("SAXS_filename","4. Characterization Methods",82,7)
mappings <- addToMappings("TGA_filename","4. Characterization Methods",71,7)
mappings <- addToMappings("sampleID","1. Data Origin",5,2)
mappings <- addToMappings("control_sampleID","1. Data Origin",6,2)
mappings <- addToMappings("fillerinfo", "2. Material Types",27,2)
mappings <- addToMappings("PSTinfo", "2. Material Types",62,1)
mappings <- addToMappings("processing", "3. Synthesis and Processing",3,1)
mappings <- addToMappings("DSCcoolingrate","4. Characterization Methods",64,3)
mappings
# create directory for submission files (if already exists, nothing happens)
dir.create("./SUBMISSION")
# make copies of master template file for each "sample"
for (i in 1:nrow(masterdf)) {→
# create directory for submission files (if already exists, nothing happens)
dir.create("./SUBMISSION")
# make copies of master template file for each "sample"
for (i in 1:nrow(masterdf)) {
## NOTE: UPDATE SO THAT EACH TEMPLATE GOES INTO SUBFOLDER "S1", "S2", etc.
sample_folder <- paste0("./SUBMISSION/", masterdf$sampleID[i])
dir.create(sample_folder)
templateFile <- paste0(sample_folder, "/", masterdf$sampleID[i], "_template.xlsx")
# save a copy of the master template, prepended with the "sample ID" surrogate key
saveWorkbook(master1, templateFile)
# Loop along columns in masterdf (add individual variables to worksheet, as well as save datafiles as separate csv's)
for (j in 1:ncol(masterdf)) {
if(!is.na(mappings$sheet[j])) { # only execute if a worksheet name is given in mappings dataframe
writeWorksheetToFile(file = templateFile, data = masterdf[[i,j]], sheet = mappings$sheet[j], startRow = mappings$cellrow[j], startCol = mappings$cellcol[j],header = FALSE)
}
# Loop for writing datafiles
if(grepl("_datafile", names(masterdf)[j])) { # only execute if "_datafile" is in column header
#print(names(masterdf[j]))
if(!is.null(masterdf[[j]][[i]])) { # execute if the datafile cell is NOT NULL # 2020-06-08 updated datafile indices from [[i,j]] to [[j]][[i]] (R 4.0 compatibility?)
#print(paste0("./SUBMISSION/", masterdf$sampleID[i], "/", masterdf[[i,j-1]]))
#  write_csv(masterdf[[i,j]], path=paste0("./SUBMISSION/", masterdf$sampleID[i], "/", masterdf[[i,j-1]])) # (filename is i,j-1)
## NOTE: write_excel_csv produces unreadable files; we should implement csv handling (or JSON handling where can include metadata)
## the files are only readable once .csv is appended
# 2020-06-08 added .xlsx output instead of .csv output
writeWorksheetToFile(file = paste0("./SUBMISSION/", masterdf$sampleID[i], "/", masterdf[[i,j-1]]), data = masterdf[[j]][[i]], sheet = "Sheet1")
}
}
}
# Loop for saving images (if an imagefolder is assigned to the sample)
if(!is.na(masterdf$imagefolder[i])) { # if sample has a folder of images associated with it
# save temporary list of all files in the image directory
temp_list_of_images <- list.files(masterdf$imagefolder[i])
# copy all files to the sample subdirectory
file.copy(paste0(masterdf$imagefolder[i],"/",temp_list_of_images), sample_folder)
# list files in Excel sample template
# base tibble (1 image, with data and placeholder for filename)
image_info <- tribble(
~x, ~y, ~z,
"Imagefile #", "Datafile name.jpg/png/tif/gif", "Note",
"Microstructure filename", "", "",
"Description", "", "",
"Microscopy type", "TEM", "",
"Image type", "grayscale", "",
"","","",
"Image dimension", "Fixed Value", "Unit",
"Width", "4000", "pixel",
"Height", "2996", "pixel",
"Depth", "8", "bit",
"Preprocessing", "", "",
"","",""
) # 2020-06-08 removed NAs and replaced with empty character strings ""
aggregate_image_info <- tibble(x=as.character(NA),y=as.character(NA),z=as.character(NA)) # 2020-06-08 added as.character()
image_info_sample <- tribble(
~x,~y,~z,
"Sample experimental info", "Fixed Value", "Unit",
"Sample size", "", "",
"Sample thickness", "125", "nm"
) # 2020-06-08 removed NAs and replaced with empty character strings ""
# rbind tibbles for each image in temp_list_of_images
for (k in 1:length(temp_list_of_images)) {
temp_image_info <- image_info
temp_image_info[[2,2]] <- temp_list_of_images[k]
aggregate_image_info <- rbind(aggregate_image_info,temp_image_info)
}
# append final info with sample thickness to tibble
aggregate_image_info <- rbind(aggregate_image_info,image_info_sample)
# add complete tibble to sheet '6. Microstructure' of sample template
writeWorksheetToFile(file = templateFile, data = aggregate_image_info, sheet = "6. Microstructure", startRow = 3, startCol = 1, header = FALSE)
}
}
masterdf[[4,12]]
masterdf[[4,11]]
masterdf[4,11]
masterdf[[11,4]]
masterdf[[11,12]]
masterdf[[11,4]]
masterdf[[12,4]]
masterdf[[13,4]]
is.na(masterdf[[13,4]])
is.na(masterdf[[12,4]])
# create directory for submission files (if already exists, nothing happens)
dir.create("./SUBMISSION")
# make copies of master template file for each "sample"
for (i in 13:nrow(masterdf)) {
## NOTE: UPDATE SO THAT EACH TEMPLATE GOES INTO SUBFOLDER "S1", "S2", etc.
sample_folder <- paste0("./SUBMISSION/", masterdf$sampleID[i])
dir.create(sample_folder)
templateFile <- paste0(sample_folder, "/", masterdf$sampleID[i], "_template.xlsx")
# save a copy of the master template, prepended with the "sample ID" surrogate key
saveWorkbook(master1, templateFile)
# Loop along columns in masterdf (add individual variables to worksheet, as well as save datafiles as separate csv's)
for (j in 1:ncol(masterdf)) {
# 2020-06-08: if melting_temp is NA, print "" to "5.4 Properties-Thermal", row 30, col 4
if(grepl("melting_temp", names(masterdf)[j])) {
if(is.na(masterdf[[i,j]])){
writeWorksheetToFile(file = templateFile, data = "", sheet = "5.4 Properties-Thermal", startRow = 30, startCol = 4, header = FALSE)
}
}
if(!is.na(mappings$sheet[j])) { # only execute if a worksheet name is given in mappings dataframe
writeWorksheetToFile(file = templateFile, data = masterdf[[i,j]], sheet = mappings$sheet[j], startRow = mappings$cellrow[j], startCol = mappings$cellcol[j],header = FALSE)
}
# Loop for writing datafiles
if(grepl("_datafile", names(masterdf)[j])) { # only execute if "_datafile" is in column header
#print(names(masterdf[j]))
if(!is.null(masterdf[[j]][[i]])) { # execute if the datafile cell is NOT NULL # 2020-06-08 updated datafile indices from [[i,j]] to [[j]][[i]] (R 4.0 compatibility?)
#print(paste0("./SUBMISSION/", masterdf$sampleID[i], "/", masterdf[[i,j-1]]))
#  write_csv(masterdf[[i,j]], path=paste0("./SUBMISSION/", masterdf$sampleID[i], "/", masterdf[[i,j-1]])) # (filename is i,j-1)
## NOTE: write_excel_csv produces unreadable files; we should implement csv handling (or JSON handling where can include metadata)
## the files are only readable once .csv is appended
# 2020-06-08 added .xlsx output instead of .csv output
writeWorksheetToFile(file = paste0("./SUBMISSION/", masterdf$sampleID[i], "/", masterdf[[i,j-1]]), data = masterdf[[j]][[i]], sheet = "Sheet1")
}
}
}
# Loop for saving images (if an imagefolder is assigned to the sample)
if(!is.na(masterdf$imagefolder[i])) { # if sample has a folder of images associated with it
# save temporary list of all files in the image directory
temp_list_of_images <- list.files(masterdf$imagefolder[i])
# copy all files to the sample subdirectory
file.copy(paste0(masterdf$imagefolder[i],"/",temp_list_of_images), sample_folder)
# list files in Excel sample template
# base tibble (1 image, with data and placeholder for filename)
image_info <- tribble(
~x, ~y, ~z,
"Imagefile #", "Datafile name.jpg/png/tif/gif", "Note",
"Microstructure filename", "", "",
"Description", "", "",
"Microscopy type", "TEM", "",
"Image type", "grayscale", "",
"","","",
"Image dimension", "Fixed Value", "Unit",
"Width", "4000", "pixel",
"Height", "2996", "pixel",
"Depth", "8", "bit",
"Preprocessing", "", "",
"","",""
) # 2020-06-08 removed NAs and replaced with empty character strings ""
aggregate_image_info <- tibble(x=as.character(NA),y=as.character(NA),z=as.character(NA)) # 2020-06-08 added as.character()
image_info_sample <- tribble(
~x,~y,~z,
"Sample experimental info", "Fixed Value", "Unit",
"Sample size", "", "",
"Sample thickness", "125", "nm"
) # 2020-06-08 removed NAs and replaced with empty character strings ""
# rbind tibbles for each image in temp_list_of_images
for (k in 1:length(temp_list_of_images)) {
temp_image_info <- image_info
temp_image_info[[2,2]] <- temp_list_of_images[k]
aggregate_image_info <- rbind(aggregate_image_info,temp_image_info)
}
# append final info with sample thickness to tibble
aggregate_image_info <- rbind(aggregate_image_info,image_info_sample)
# add complete tibble to sheet '6. Microstructure' of sample template
writeWorksheetToFile(file = templateFile, data = aggregate_image_info, sheet = "6. Microstructure", startRow = 3, startCol = 1, header = FALSE)
}
}
